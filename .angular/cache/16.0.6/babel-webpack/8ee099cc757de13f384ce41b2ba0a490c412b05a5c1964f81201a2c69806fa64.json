{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nclass AuthService {\n  constructor() {\n    this.isAuthenticated = false;\n    this.isAdminUser = false;\n    this.authState = {\n      isAuthenticated: false\n    };\n    this.token = null;\n  }\n  setToken(token) {\n    this.token = token;\n  }\n  getToken() {\n    return this.token;\n  }\n  // Simulate user login\n  login() {\n    this.authState.isAuthenticated = true;\n  }\n  setAdmin(isAdmin) {\n    this.isAdminUser = isAdmin;\n  }\n  isAdmin() {\n    return this.isAdminUser;\n  }\n  // Simulate user logout\n  logout() {\n    this.token = null;\n    this.authState.isAuthenticated = false;\n    this.isAdminUser = false;\n  }\n  // Check if the user is authenticated\n  isAuthenticatedUser() {\n    return this.authState.isAuthenticated;\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["AuthService","constructor","isAuthenticated","isAdminUser","authState","token","setToken","getToken","login","setAdmin","isAdmin","logout","isAuthenticatedUser","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\P10\\demo\\src\\app\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private isAuthenticated = false;\r\n  private isAdminUser=false;\r\n  authState = { isAuthenticated: false};\r\n\r\n  private token: string | null=null;\r\n\r\n  setToken(token:string):void{\r\n    this.token=token;\r\n  }\r\n\r\n  getToken():string| null{\r\n    return this.token;\r\n  }\r\n\r\n  // Simulate user login\r\n  login() {\r\n    this.authState.isAuthenticated = true;\r\n  }\r\n\r\n  setAdmin(isAdmin:boolean)\r\n  {\r\n    this.isAdminUser=isAdmin;\r\n  }\r\n\r\n  isAdmin():boolean\r\n  {\r\n    return this.isAdminUser;\r\n  }\r\n\r\n  // Simulate user logout\r\n  logout() {\r\n    this.token=null;\r\n    this.authState.isAuthenticated = false;\r\n    this.isAdminUser=false;\r\n   \r\n  }\r\n\r\n  // Check if the user is authenticated\r\n  isAuthenticatedUser(): boolean {\r\n    return this.authState.isAuthenticated;\r\n  }\r\n\r\n  // isAdminUser():boolean{\r\n  //   return this.authState.isAdmin;\r\n  // }\r\n}\r\n"],"mappings":";;AAEA,MAGaA,WAAW;EAHxBC,YAAA;IAIU,KAAAC,eAAe,GAAG,KAAK;IACvB,KAAAC,WAAW,GAAC,KAAK;IACzB,KAAAC,SAAS,GAAG;MAAEF,eAAe,EAAE;IAAK,CAAC;IAE7B,KAAAG,KAAK,GAAgB,IAAI;;EAEjCC,QAAQA,CAACD,KAAY;IACnB,IAAI,CAACA,KAAK,GAACA,KAAK;EAClB;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,KAAK;EACnB;EAEA;EACAG,KAAKA,CAAA;IACH,IAAI,CAACJ,SAAS,CAACF,eAAe,GAAG,IAAI;EACvC;EAEAO,QAAQA,CAACC,OAAe;IAEtB,IAAI,CAACP,WAAW,GAACO,OAAO;EAC1B;EAEAA,OAAOA,CAAA;IAEL,OAAO,IAAI,CAACP,WAAW;EACzB;EAEA;EACAQ,MAAMA,CAAA;IACJ,IAAI,CAACN,KAAK,GAAC,IAAI;IACf,IAAI,CAACD,SAAS,CAACF,eAAe,GAAG,KAAK;IACtC,IAAI,CAACC,WAAW,GAAC,KAAK;EAExB;EAEA;EACAS,mBAAmBA,CAAA;IACjB,OAAO,IAAI,CAACR,SAAS,CAACF,eAAe;EACvC;;SAzCWF,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAa,OAAA,EAAXb,MAAW,CAAAc,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPf,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}