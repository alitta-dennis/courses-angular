{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport { of, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../auth.service\";\nclass CourseService {\n  //private adminUrl='http://127.0.0.1:8000/admin';\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    // private coursesUrl = 'http://localhost:3000/coursesList'; // JSON Server endpoint\n    this.coursesUrl = 'http://127.0.0.1:8000/api/courses';\n    this.editUrl = 'http://127.0.0.1:8000/courses/img';\n  }\n  getCourses() {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    c;\n    //let options = new RequestOptions({ headers: headers });\n    return this.http.get(this.coursesUrl, {\n      headers\n    }).pipe(tap(data => console.log(JSON.stringify(data))), catchError(this.handleError));\n  }\n  getCourse(id) {\n    const token = this.authService.getToken();\n    if (id === 0) {\n      return of(this.initializeCourse());\n    }\n    const url = `${this.coursesUrl}/${id}`;\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(url, {\n      headers\n    }).pipe(tap(data => console.log('getCourse: ' + JSON.stringify(data))), catchError(this.handleError));\n  }\n  createCourses(formData) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    // const headers = new HttpHeaders({});\n    // Course.id = null;\n    return this.http.post(this.coursesUrl, formData, {\n      headers\n    }).pipe(tap(data => {\n      console.log('createCourse: ', data);\n    }), catchError(this.handleError));\n  }\n  deleteCourse(id) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const url = `${this.coursesUrl}/${id}`;\n    return this.http.delete(url, {\n      headers\n    }).pipe(tap(data => console.log('deleteCourse: ' + id)), catchError(this.handleError));\n  }\n  updateCourse(Course) {\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    const url = `${this.coursesUrl}/${Course.id}`;\n    return this.http.put(url, Course, {\n      headers\n    }).pipe(tap(() => console.log('updateCourse: ' + Course.id)),\n    // Return the Course on an update\n    map(() => Course), catchError(this.handleError));\n  }\n  updateCourseWithImg(Courseid, courseData) {\n    const url = `${this.editUrl}/${Courseid}`;\n    const token = this.authService.getToken();\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.post(url, courseData, {\n      headers\n    }).pipe(tap(() => console.log('updateCourse: ' + Courseid)),\n    // Return the Course on an update\n    map(() => courseData),\n    // Cast FormData to course for simplicity\n    catchError(this.handleError));\n  }\n  // ... Other methods (getCourse, createCourse, deleteCourse, updateCourse) remain the same\n  handleError(err) {\n    let errorMessage = '';\n    if (err.error instanceof ErrorEvent) {\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\n    }\n    console.error(errorMessage);\n    return throwError(() => errorMessage);\n  }\n  initializeCourse() {\n    // Return an initialized object\n    return {\n      id: 0,\n      courseName: '',\n      courseCode: '',\n      startDate: '',\n      price: 0,\n      starRating: 0,\n      imageUrl: '',\n      category: 0\n    };\n  }\n}\n_class = CourseService;\n_class.ɵfac = function CourseService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { CourseService };","map":{"version":3,"names":["HttpHeaders","of","throwError","catchError","tap","map","CourseService","constructor","http","authService","coursesUrl","editUrl","getCourses","token","getToken","headers","set","c","get","pipe","data","console","log","JSON","stringify","handleError","getCourse","id","initializeCourse","url","createCourses","formData","post","deleteCourse","delete","updateCourse","Course","put","updateCourseWithImg","Courseid","courseData","err","errorMessage","error","ErrorEvent","message","status","courseName","courseCode","startDate","price","starRating","imageUrl","category","i0","ɵɵinject","i1","HttpClient","i2","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\LENOVO\\P10\\demo\\src\\app\\courses\\course.service.ts"],"sourcesContent":["\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders,HttpParams } from '@angular/common/http';\r\n\r\n\r\nimport { Observable, of, throwError } from 'rxjs';\r\nimport { catchError, tap, map } from 'rxjs/operators';\r\n\r\nimport { course } from './course';\r\n\r\nimport { AuthService } from '../auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CourseService {\r\n  // private coursesUrl = 'http://localhost:3000/coursesList'; // JSON Server endpoint\r\n  private coursesUrl = 'http://127.0.0.1:8000/api/courses';\r\n  private editUrl='http://127.0.0.1:8000/courses/img';\r\n  //private adminUrl='http://127.0.0.1:8000/admin';\r\n  constructor(private http: HttpClient,private authService:AuthService) { }\r\n\r\n  getCourses(): Observable<course[]> {\r\n\r\n    const token=this.authService.getToken();\r\n    const headers=new HttpHeaders().set('Authorization',`Bearer ${token}`);\r\n    c\r\n    //let options = new RequestOptions({ headers: headers });\r\n    return this.http.get<course[]>(this.coursesUrl,{headers})\r\n      .pipe(\r\n        tap(data => console.log(JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  getCourse(id: number): Observable<course> {\r\n    const token=this.authService.getToken();\r\n    if (id === 0) {\r\n      return of(this.initializeCourse());\r\n    }\r\n    const url = `${this.coursesUrl}/${id}`;\r\n    const headers=new HttpHeaders().set('Authorization',`Bearer ${token}`);\r\n    return this.http.get<course>(url,{headers})\r\n      .pipe(\r\n        tap(data => console.log('getCourse: ' + JSON.stringify(data))),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  createCourses(formData: FormData): Observable<course> {\r\n    const token=this.authService.getToken();\r\n    const headers=new HttpHeaders().set('Authorization',`Bearer ${token}`);\r\n    // const headers = new HttpHeaders({});\r\n    // Course.id = null;\r\n    return this.http.post<course>(this.coursesUrl, formData, { headers }).pipe(\r\n      \r\n      \r\n      tap((data:any)=>{\r\n      console.log('createCourse: ', data);\r\n      }),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  deleteCourse(id: number): Observable<{}> {\r\n    const token=this.authService.getToken();\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json','Authorization':`Bearer ${token}` });\r\n    const url = `${this.coursesUrl}/${id}`;\r\n    return this.http.delete<course>(url, { headers })\r\n      .pipe(\r\n        tap(data => console.log('deleteCourse: ' + id)),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateCourse(Course: course): Observable<course> {\r\n    const token=this.authService.getToken();\r\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json','Authorization':`Bearer ${token}` });\r\n    const url = `${this.coursesUrl}/${Course.id}`;\r\n    return this.http.put<course>(url, Course, { headers })\r\n      .pipe(\r\n        tap(() => console.log('updateCourse: ' + Course.id)),\r\n        // Return the Course on an update\r\n        map(() => Course),\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  updateCourseWithImg(Courseid: number,courseData:FormData): Observable<course> {\r\n    \r\n    const url = `${this.editUrl}/${Courseid}`;\r\n    const token=this.authService.getToken();\r\n    const headers=new HttpHeaders().set('Authorization',`Bearer ${token}`);\r\n    return this.http.post<course>(url, courseData,{headers})\r\n      .pipe(\r\n        tap(() => console.log('updateCourse: ' + Courseid)),\r\n        // Return the Course on an update\r\n        map(() => courseData as unknown as course), // Cast FormData to course for simplicity\r\n        catchError(this.handleError)\r\n      );\r\n  }\r\n\r\n  // ... Other methods (getCourse, createCourse, deleteCourse, updateCourse) remain the same\r\n\r\n  private handleError(err: HttpErrorResponse): Observable<never> {\r\n    let errorMessage = '';\r\n    if (err.error instanceof ErrorEvent) {\r\n      errorMessage = `An error occurred: ${err.error.message}`;\r\n    } else {\r\n      errorMessage = `Server returned code: ${err.status}, error message is: ${err.message}`;\r\n    }\r\n    console.error(errorMessage);\r\n    return throwError(() => errorMessage);\r\n  }\r\n\r\n   private initializeCourse(): course {\r\n    // Return an initialized object\r\n    return {\r\n      id: 0,\r\n      courseName: '',\r\n      courseCode: '',\r\n      startDate:'',\r\n      price:0,\r\n      starRating:0,\r\n      imageUrl:'',\r\n      category:0\r\n      \r\n    };\r\n  }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}