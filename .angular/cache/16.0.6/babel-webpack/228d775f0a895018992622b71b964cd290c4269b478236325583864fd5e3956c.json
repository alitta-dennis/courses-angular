{"ast":null,"code":"var _class;\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction SignupPageComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Email is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupPageComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Invalid email format. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupPageComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Password is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction SignupPageComponent_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Password must be at least 4 characters long. \");\n    i0.ɵɵelementEnd();\n  }\n}\nclass SignupPageComponent {\n  constructor(formBuilder, http, router) {\n    this.formBuilder = formBuilder;\n    this.http = http;\n    this.router = router;\n  }\n  ngOnInit() {\n    this.signUpForm = this.formBuilder.group({\n      // fname: [\"\", Validators.required],\n      // phone: [\"\", Validators.required],\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", [Validators.required, Validators.minLength(4)]]\n    });\n  }\n  // signUp() {\n  //   if (this.signUpForm.valid){\n  //   console.log(this.signUpForm.value);\n  //   this.http.post<any>(\"http://localhost:3000/signupUsersList\", this.signUpForm.value)\n  //     .subscribe({\n  //       next: (res) => {\n  //         alert('Sign Up Successful');\n  //         this.signUpForm.reset();\n  //         this.router.navigate([\"login\"]);\n  //       },\n  //       error: (err) => {\n  //         alert(\"Something went wrong\");\n  //       }\n  //     });\n  //   }\n  //   else {\n  //     alert(\"Please enter all the required values.\")\n  //   }\n  // }\n  signUp() {\n    if (this.signUpForm.valid) {\n      console.log(this.signUpForm.value);\n      // Check if the email already exists before submitting the form\n      // this.http.get<any>(\"http://127.0.0.1:8000/api/register\").subscribe({\n      //   next: (users) => {\n      // Check if the email already exists in the list of users\n      //const emailExists = users.some((user: { email: any; }) => user.email === this.signUpForm.value.email);\n      // if (emailExists) {\n      //   alert(\"User already exists!!\");\n      // } else \n      {\n        // Email doesn't exist, proceed with sign up\n        this.http.post(\"http://127.0.0.1:8000/api/register\", this.signUpForm.value).subscribe({\n          next: res => {\n            alert('Sign Up Successful');\n            this.signUpForm.reset();\n            this.router.navigate([\"login\"]);\n          },\n          error: err => {\n            if (err.status === 409) {\n              alert('User already exists');\n            }\n            alert(\"Error in sign-up!\");\n          }\n        });\n      }\n    }\n    // error: (err) => {\n    //   alert(\"Something went wrong while checking email availability.\");\n    // }\n  }\n}\n_class = SignupPageComponent;\n_class.ɵfac = function SignupPageComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HttpClient), i0.ɵɵdirectiveInject(i3.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-signup-page\"]],\n  decls: 24,\n  vars: 5,\n  consts: [[1, \"container\"], [\"autocomplete\", \"off\", 1, \"form-box1\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Enter Email\", 1, \"form-control\", \"mb-3\", \"mt-3\"], [\"style\", \"color:red;font-size: smaller;\", \"class\", \"error-message\", 4, \"ngIf\"], [\"for\", \"password\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Enter Password\", 1, \"form-control\", \"mb-3\", \"mt-3\"], [\"routerLink\", \"/login\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\"], [1, \"error-message\", 2, \"color\", \"red\", \"font-size\", \"smaller\"]],\n  template: function SignupPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function SignupPageComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.signUp();\n      });\n      i0.ɵɵelementStart(2, \"h3\");\n      i0.ɵɵtext(3, \"SignUp \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(7, \"input\", 4);\n      i0.ɵɵtemplate(8, SignupPageComponent_div_8_Template, 2, 0, \"div\", 5);\n      i0.ɵɵtemplate(9, SignupPageComponent_div_9_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"label\", 6);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵtemplate(14, SignupPageComponent_div_14_Template, 2, 0, \"div\", 5);\n      i0.ɵɵtemplate(15, SignupPageComponent_div_15_Template, 2, 0, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"span\");\n      i0.ɵɵtext(17, \"Already have an account? \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"a\", 8);\n      i0.ɵɵtext(19, \"Sign In\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementStart(21, \"button\", 9);\n      i0.ɵɵtext(22, \"Signup\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelement(23, \"router-outlet\");\n    }\n    if (rf & 2) {\n      let tmp_1_0;\n      let tmp_2_0;\n      let tmp_3_0;\n      let tmp_4_0;\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.signUpForm);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_1_0 = ctx.signUpForm.get(\"email\")) == null ? null : tmp_1_0.hasError(\"required\")) && ((tmp_1_0 = ctx.signUpForm.get(\"email\")) == null ? null : tmp_1_0.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.signUpForm.get(\"email\")) == null ? null : tmp_2_0.hasError(\"email\")) && ((tmp_2_0 = ctx.signUpForm.get(\"email\")) == null ? null : tmp_2_0.touched));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_3_0 = ctx.signUpForm.get(\"password\")) == null ? null : tmp_3_0.hasError(\"required\")) && ((tmp_3_0 = ctx.signUpForm.get(\"password\")) == null ? null : tmp_3_0.touched));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ((tmp_4_0 = ctx.signUpForm.get(\"password\")) == null ? null : tmp_4_0.hasError(\"minlength\")) && ((tmp_4_0 = ctx.signUpForm.get(\"password\")) == null ? null : tmp_4_0.touched));\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i3.RouterOutlet, i3.RouterLink],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { SignupPageComponent };","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","SignupPageComponent","constructor","formBuilder","http","router","ngOnInit","signUpForm","group","email","required","password","minLength","signUp","valid","console","log","value","post","subscribe","next","res","alert","reset","navigate","error","err","status","ɵɵdirectiveInject","i1","FormBuilder","i2","HttpClient","i3","Router","selectors","decls","vars","consts","template","SignupPageComponent_Template","rf","ctx","ɵɵlistener","SignupPageComponent_Template_form_ngSubmit_1_listener","ɵɵelement","ɵɵtemplate","SignupPageComponent_div_8_Template","SignupPageComponent_div_9_Template","SignupPageComponent_div_14_Template","SignupPageComponent_div_15_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","get","hasError","touched","tmp_2_0","tmp_3_0","tmp_4_0"],"sources":["C:\\Users\\LENOVO\\P10\\demo\\src\\app\\signup-page\\signup-page.component.ts","C:\\Users\\LENOVO\\P10\\demo\\src\\app\\signup-page\\signup-page.component.html"],"sourcesContent":["\r\nimport { Component } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-signup-page',\r\n  templateUrl: './signup-page.component.html',\r\n  styleUrls: ['./signup-page.component.css']\r\n})\r\nexport class SignupPageComponent {\r\n  public signUpForm !: FormGroup\r\n  constructor(private formBuilder: FormBuilder, private http: HttpClient, private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.signUpForm = this.formBuilder.group({\r\n      // fname: [\"\", Validators.required],\r\n      // phone: [\"\", Validators.required],\r\n      email: [\"\", [Validators.required, Validators.email]],\r\n      password: [\"\", [Validators.required, Validators.minLength(4)]]\r\n    })\r\n  }\r\n\r\n\r\n  // signUp() {\r\n  //   if (this.signUpForm.valid){\r\n  //   console.log(this.signUpForm.value);\r\n  //   this.http.post<any>(\"http://localhost:3000/signupUsersList\", this.signUpForm.value)\r\n  //     .subscribe({\r\n  //       next: (res) => {\r\n  //         alert('Sign Up Successful');\r\n  //         this.signUpForm.reset();\r\n  //         this.router.navigate([\"login\"]);\r\n  //       },\r\n  //       error: (err) => {\r\n  //         alert(\"Something went wrong\");\r\n  //       }\r\n  //     });\r\n  //   }\r\n  //   else {\r\n  //     alert(\"Please enter all the required values.\")\r\n  //   }\r\n  // }\r\n  \r\n\r\n  signUp() {\r\n    if (this.signUpForm.valid) {\r\n      console.log(this.signUpForm.value);\r\n  \r\n      // Check if the email already exists before submitting the form\r\n      // this.http.get<any>(\"http://127.0.0.1:8000/api/register\").subscribe({\r\n      //   next: (users) => {\r\n          // Check if the email already exists in the list of users\r\n          //const emailExists = users.some((user: { email: any; }) => user.email === this.signUpForm.value.email);\r\n          // if (emailExists) {\r\n          //   alert(\"User already exists!!\");\r\n          // } else \r\n          {\r\n            // Email doesn't exist, proceed with sign up\r\n            this.http.post<any>(\"http://127.0.0.1:8000/api/register\", this.signUpForm.value).subscribe({\r\n              next: (res) => {\r\n                alert('Sign Up Successful');\r\n                this.signUpForm.reset();\r\n                this.router.navigate([\"login\"]);\r\n              },\r\n              error: (err) => {\r\n                if(err.status===409){\r\n                  alert('User already exists')\r\n                }\r\n                alert(\"Error in sign-up!\");\r\n              }\r\n            });\r\n          }\r\n        }\r\n        // error: (err) => {\r\n        //   alert(\"Something went wrong while checking email availability.\");\r\n        // }\r\n      };\r\n    } \r\n    // else {\r\n    //   alert(\"Please enter all the required values.\");\r\n    \r\n \r\n\r\n","\r\n<!-- <div>\r\n    <h1>Hello Welcome </h1>\r\n      <h3>Create An Account</h3>\r\n       <form [formGroup]=\"signUpForm\" (ngSubmit)=\"signUp()\">\r\n         <div>\r\n           <label for=\"email\">Email</label>\r\n           <input  formControlName=\"email\" required  type=\"email\">\r\n           <label for=\"password\">Password</label>\r\n           <input formControlName=\"password\" type=\"password\">\r\n         </div>\r\n         <button>Submit</button>\r\n         <span>Already have an account? \r\n         <a routerLink=\"/login\">signUp</a></span>\r\n       </form>\r\n   </div> -->\r\n\r\n   <div class=\"container\">\r\n    <form [formGroup]=\"signUpForm\"  autocomplete=\"off\"   (ngSubmit)=\"signUp()\" class=\"form-box1\">\r\n        <h3>SignUp </h3>\r\n\r\n        <!-- <div class=\"form-group\">\r\n          <label for=\"email\">Full Name</label>\r\n          <input type=\"email\" formControlName=\"fname\" class=\"form-control mb-3 mt-3\" placeholder=\"Enter Full Name\"/>\r\n        </div>\r\n\r\n      <div class=\"form-group\">\r\n        <label for=\"email\">Phone Number</label>\r\n        <input type=\"email\" formControlName=\"phone\" class=\"form-control mb-3 mt-3\" placeholder=\"Enter Phone Number\"/>\r\n      </div> -->\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"email\">Email</label>\r\n            <input type=\"email\" formControlName=\"email\" class=\"form-control mb-3 mt-3\" placeholder=\"Enter Email\"/>\r\n            <div style=\"color:red;font-size: smaller;\" *ngIf=\"signUpForm.get('email')?.hasError('required') && signUpForm.get('email')?.touched\" class=\"error-message\">\r\n              Email is required.\r\n            </div>\r\n            <div style=\"color:red;font-size: smaller;\" *ngIf=\"signUpForm.get('email')?.hasError('email') && signUpForm.get('email')?.touched\" class=\"error-message\">\r\n              Invalid email format.\r\n            </div>\r\n        </div>\r\n\r\n\r\n        <div class=\"form-group\">\r\n            <label for=\"password\">Password</label>\r\n            <input type=\"password\" formControlName=\"password\" class=\"form-control mb-3 mt-3\" placeholder=\"Enter Password\"/>\r\n            <div style=\"color:red;font-size: smaller;\" *ngIf=\"signUpForm.get('password')?.hasError('required') && signUpForm.get('password')?.touched\" class=\"error-message\">\r\n              Password is required.\r\n              </div>\r\n            <div style=\"color:red;font-size: smaller;\" *ngIf=\"signUpForm.get('password')?.hasError('minlength') && signUpForm.get('password')?.touched\" class=\"error-message\">\r\n              Password must be at least 4 characters long.\r\n            </div>\r\n        </div>\r\n\r\n        <span>Already have an account? </span>\r\n        <a routerLink=\"/login\">Sign In</a>\r\n        <br/>\r\n        <button type=\"submit\" class=\"btn btn-success\">Signup</button>\r\n    </form>\r\n</div>\r\n<router-outlet></router-outlet>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}